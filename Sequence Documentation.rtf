{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\fswiss\fprq2\fcharset0 Calibri Light;}{\f2\fmodern\fprq1\fcharset0 Courier New;}{\f3\fswiss\fprq2\fcharset0 Calibri;}{\f4\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue255;\red5\green99\blue193;\red0\green255\blue255;\red242\green242\blue242;}
{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
\pard\widctlpar\f0\fs24 Created by Keith Meyer\par

\pard\widctlpar\qc\par
\expndtw-10\kerning28\f1\fs56 Sequence\par

\pard\widctlpar\fi720\sa160\sl252\slmult1\expndtw0\kerning0\f0\fs24 Sequence is a tape/cell-based language that is fully Turing-complete (and a Turing tarpit). It is inspired by Brainf*ck, and uses a similar command set, but only uses only two symbols: the period and the space. All other characters are ignored and treated as comments. Unlike other languages that execute commands discretely, each command in Sequence depends upon the commands executed before it. Memory in Sequence is represented by an \ldblquote infinite\rdblquote  tape, an sufficiently large array of bytes (at least 2E18 bytes) that are each initialized to zero. Memory is accessed using a data pointer (tape head) that starts at the zeroth byte and can move in either direction (to negative or positive positions).\par
In Sequence, code is executed in space-separated blocks, with each block containing a single command. Within each coding block, a command is represented by a sequence of dots, with each \ldblquote dot\rdblquote  executing a different command based on its ordinal number. An example code block would be \ldblquote\b\f2 ...\b0\f0\rdblquote  which would execute the single dot command, the second dot command, and the third dot command, in order.\par
Command definitions are listed below.\par
\trowd\trgaph115\trleft5\trqc\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl115\trpaddr115\trpaddfl3\trpaddfr3
\clcbpat4\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx1795\clcbpat4\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx2953\clcbpat4\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx6344\clcbpat4\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\qc\b Dot Representation\cell Ordinal Number\cell Command\cell Effective Command\cell\row\trowd\trgaph115\trleft5\trqc\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl115\trpaddr115\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx1795\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx2953\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx6344\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\f2 .\cell\b0\f0 1\cell Increment the byte under the data pointer.\cell Increment the byte under the data pointer.\cell\row\trowd\trgaph115\trleft5\trqc\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl115\trpaddr115\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx1795\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx2953\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx6344\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\b\f2 ..\cell\b0\f0 2\cell Decrement the byte under the data pointer.\cell <none>\cell\row\trowd\trgaph115\trleft5\trqc\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl115\trpaddr115\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx1795\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx2953\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx6344\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\b\f2 ...\cell\b0\f0 3\cell Move data pointer right.\cell Move data pointer right.\cell\row\trowd\trgaph115\trleft5\trqc\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl115\trpaddr115\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx1795\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx2953\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx6344\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\b\f2 ....\cell\b0\f0 4\cell Move data pointer left.\cell <none>\cell\row 
\pard\widctlpar\sa160\sl252\slmult1\par

\pard\widctlpar\fi720\sa160\sl252\slmult1 While each ordinal number has a command, the execution of the commands before it often counteract the result from changing anything, resulting in an effective command of null. For example, two dots (\b\f2 ..\b0\f0 ) will first increment the byte before decrementing the same byte, leaving the byte the same as it was before. Command blocks greater than four dots are executed according to modular arithmetic, ex: seven dots (\b\f2 ......\b0\f0 ) would execute ordinals 1-4, and then 1-3 again, for an effective command of moving the data pointer right one.\par
In addition to command blocks, each group of two command blocks are themselves executed as block-based commands. For example, the sequence 1 3 2 (\b\f2 . ... ..\b0\f0 ) includes two block groupings, 1 3 and 3 2.\par
Block-based commands are listed below:\par
\trowd\trgaph115\trleft5\trqc\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl115\trpaddr115\trpaddfl3\trpaddfr3
\clcbpat4\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx1915\clcbpat4\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3119\clcbpat4\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx6419\clcbpat4\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\qc\b Dot Representation*\cell Ordinal Number*\cell Command\cell Effective Command\cell\row\trowd\trgaph115\trleft5\trqc\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl115\trpaddr115\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx1915\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3119\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx6419\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\f2 x \cell\b0\f0 X 0\cell No command (spacer)\cell <none>\cell\row\trowd\trgaph115\trleft5\trqc\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl115\trpaddr115\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx1915\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3119\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx6419\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\b\f2 x .\cell\b0\f0 X 1\cell Repeats command block X.\cell Increments pointer and repeats X.\cell\row\trowd\trgaph115\trleft5\trqc\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl115\trpaddr115\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx1915\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3119\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx6419\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\b\f2 x ..\cell\b0\f0 X 2\cell Repeats only last command of X.\cell Repeats only last command of X.\cell\row\trowd\trgaph115\trleft5\trqc\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl115\trpaddr115\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx1915\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3119\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx6419\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\b\f2 . ...\cell\b0\f0 1 3\cell Copies byte from the left.\cell Increments pointer, moves pointer right, then copies.\cell\row\trowd\trgaph115\trleft5\trqc\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl115\trpaddr115\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx1915\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3119\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx6419\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\b\f2 . ....\cell\b0\f0 1 4\cell Copies byte from right.\cell Increments pointer, copies byte from right.\cell\row\trowd\trgaph115\trleft5\trqc\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl115\trpaddr115\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx1915\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3119\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx6419\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\b\f2 .. ...\cell\b0\f0 2 3\cell Begins loop if byte is nonzero, skips to matching 2 4 if zero.\cell Moves pointer right, begins loop if nonzero.\cell\row\trowd\trgaph115\trleft5\trqc\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl115\trpaddr115\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx1915\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3119\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx6419\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\b\f2 .. ....\cell\b0\f0 2 4\cell Continues loop if byte is nonzero, ends loop if zero.\cell Continues loop if byte is nonzero, ends loop if zero.\cell\row\trowd\trgaph115\trleft5\trqc\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl115\trpaddr115\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx1915\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3119\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx6419\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\b\f2 ... ...\cell\b0\f0 3 3\cell Adds byte under pointer by the byte to the left.\cell Moves pointer right twice, adds by the left.\cell\row\trowd\trgaph115\trleft5\trqc\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl115\trpaddr115\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx1915\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3119\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx6419\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\b\f2 ... ....\cell\b0\f0 3 4\cell Adds byte under pointer by the byte to the right.\cell Moves pointer right , adds by right.\cell\row\trowd\trgaph115\trleft5\trqc\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl115\trpaddr115\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx1915\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3119\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx6419\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\b\f2 .... ...\cell\b0\f0 4 3\cell Reads one byte of data and stores it under the pointer.\cell Moves pointer right, reads and stores byte.\cell\row\trowd\trgaph115\trleft5\trqc\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl115\trpaddr115\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx1915\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3119\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx6419\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\b\f2 .... ....\cell\b0\f0 4 4\cell Outputs byte of data under the pointer.\cell Outputs byte of data under the pointer.\cell\row\trowd\trgaph115\trleft5\trqc\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl115\trpaddr115\trpaddfl3\trpaddfr3
\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx1915\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx3119\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx6419\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\b\f2 x y\cell\b0\f0 X Y\cell Repeats only last command of X for Y times. (Y > 4)\cell Executes X and Y, repeats X for Y times.\cell\row 
\pard\widctlpar\fi720\li720\sa160\sl252\slmult1\i *The variables \b x\b0  and \b y\b0  are used to represent an arbitrary code block.\par

\pard\widctlpar\sa160\sl252\slmult1\tab\i0 It is important to note that commands within blocks are executed before block commands, resulting in more complicated effective commands. Also, block commands can use the same blocks as other block commands. Consider 1 3 2 (\b\f2 . ... ..\b0\f0 ), which will execute the first block (\b\f2 .\b0\f0 ), then the second block (\b\f2 ...\b0\f0 ), and then the block command (\b\f2 . ...\b0\f0 ) before moving to the third block (\b\f2 ..\b0\f0 ) and the next block command (\b\f2 ... ..\b0\f0 ). This will will increment the byte under the pointer, move the pointer right, copy the pointer from the left, and then move the pointer right again.\par

\pard\widctlpar\fi720\sa160\sl252\slmult1 Command blocks larger than 4 still use modular arithmetic within the block and \i when on the left\i0 , but not when being read as a block command \i on the right\i0 . This means something like 1 7 2 (\b\f2 . ....... ...\b0\f0 ), will first increment the byte under the pointer, move the pointer to the right, increment the new byte seven times, move the pointer right, and then add the byte on the left to the byte under the pointer. The opportunity to chain commands can greatly improve the code density if designed properly (such a process, however, is difficult and unwieldy, thus the tarpit designation).\par
An included sample program is a translated version of Brainf*ck\rquote s \ldblquote Hello World!\rdblquote  program into Sequence. This version uses the ordinal version (numbers listed instead of dots) and line-breaks to improve readability; each line break would be replaced with an empty block for actual code execution. The comments included are (mostly) identical to those used with Brainf*ck\rquote s example.\par
\trowd\trgaph108\trleft5\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clcbpat4\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar 1 8 0 2 2 \tab\tab Set Cell Zero to eight\par
4 2 3\par
\tab 3 0 1 6 2 2 2\tab Add four to Cell One; this will always set Cell One to four\par
\tab 4 2 3\tab\tab as the cell will be cleared by the loop\par
\tab\tab 3 0 1 2\tab\tab Add two to Cell Two\par
\tab\tab 3 0 1 1\tab\tab Add three to Cell Three\par
\tab\tab 3 0 1 1\tab\tab Add three to Cell Four\par
\tab\tab 3 0 1\tab\tab Add one to Cell Five\par
\tab\tab 4 6 0 3 2 2\tab Decrement the loop counter in Cell One\par
\tab 2 4\tab\tab Loop till Cell One is zero; number of iterations is four\par
\tab 3 0 1\tab\tab Add one to Cell Two\par
\tab 3 0 1\tab\tab Add one to Cell Three\par
\tab 3 0 2 2\tab\tab Subtract one from Cell Four\par
\tab 3 2 1\tab\tab Add one to Cell Six\par
\tab 4 2 3 0 4 2 4\tab Move back to the first zero cell you find; this will\par
                       \tab\tab be Cell One which was cleared by the previous loop\par
\tab 4 2 2\tab\tab Decrement the loop Counter in Cell Zero\par
2 4                     Loop till Cell Zero is zero; number of iterations is eight\par
\par
3 2 0 4 4\tab\tab\tab Cell Two has value seventy-two which is 'H'\par
3 0 2 2 2 2 0 4 4\tab\tab Subtract three from Cell Three to get 'e'\par
1 5 0 4 4 4 0 1 2 0 1 0 4 4\tab Likewise for 'llo' from Cell Three\par
3 2 0 4 4\tab\tab\tab Cell Five is thirty-two for the space\par
4 2 2 0 4 4\tab\tab\tab Subtract one from Cell Four to give a 'W'\par
4 2 0 4 4\tab\tab\tab Cell Three was set to 'o' from the end of 'Hello'\par
1 2 0 1 0 4 4\tab\tab\tab Cell Three for 'r'\par
2 6 0 4 4 0 2 8 4\tab\tab Cell Three for 'l' and 'd'\par
3 2 0 1 0 4 4\tab\tab\tab Add one to Cell Five gives us an exclamation point\par
3 0 1 2 0 4 4\tab\tab\tab And finally a newline from Cell Six\cell\row\trowd\trgaph108\trleft5\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clcbpat4\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\cell\row 
\pard\widctlpar\sa160\sl252\slmult1\par
After eliminating the comments and replacing line breaks with a \ldblquote 0\rdblquote , this compresses down to:\par
\trowd\trgaph108\trleft5\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clcbpat4\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar 1 8 0 2 2 0 4 2 3 0 3 0 1 6 2 2 2 0 4 2 3 0 3 0 1 2 0 3 0 1 1 0 3 0 1 1 0 3 0 1 0 4 6 0 3 2 2 0 2 4 0 3 0 1 0 3 0 1 0 3 0 2 2 0 3 2 1 0 4 2 3 0 4 2 4 0 4 2 2 0 2 4 0 3 2 0 4 4 0 3 0 2 2 2 2 0 4 4 0 1 5 0 4 4 4 0 1 2 0 1 0 4 4 0 3 2 0 4 4 0 4 2 2 0 4 4 0 4 2 0 4 4 0 1 2 0 1 0 4 4 0 2 6 0 4 4 0 2 8 4 0 3 2 0 1 0 4 4 0 3 0 1 2 0 4 4 0\cell\row 
\pard\widctlpar\sa160\sl252\slmult1\par
Which in turn expands to:\par
\trowd\trgaph108\trleft5\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clcbpat4\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\b\f2 . ........  .. ..  .... .. ...  ...  . ...... .. .. ..  .... .. ...  ...  . ..  ...  . .  ...  . .  ...  .  .... ......  ... .. ..  .. ....  ...  .  ...  .  ...  .. ..  ... .. .  .... .. ...  .... .. ....  .... .. ..  .. ....  ... ..  .... ....  ...  .. .. .. ..  .... ....  . .....  .... .... ....  . ..  .  .... ....  ... ..  .... ....  .... .. ..  .... ....  .... ..  .... ....  . ..  .  .... ....  .. ......  .... ....  .. ........ ....  ... ..  .  .... ....  ...  . ..  .... ....\cell\row 
\pard\widctlpar\sa160\sl252\slmult1\b0\f0\par

\pard\widctlpar\fi720\sa160\sl252\slmult1 Of note is the fact that the original code does not use the language or chaining to its advantage, as the code is structured in such a way that chaining in fact hampers the flow and makes it longer than necessary. Thus this example is only included to help demonstrate that all the faculties of Brainf*ck are supported in Sequence.\par

\pard\widctlpar\sa160\sl252\slmult1\tab The following is a Universal Turing machine based on BrainF*ck code written by Daniel Cristofori and one of the Turing machine definitions provided by Yurii Rogozhin in \ldblquote Small universal Turing machines\rdblquote  in Theoretical Computer Science. This specific Turing-machine simulates a Turing-complete class of tag-systems (a computational system by Emil Post). As Sequence can implement a Turing machine to simulate the tag system, which is Turing-complete, then it can simulate other Turing machines in turn. The exact functionality of the tag system is better described elsewhere, and is not explained here for brevity (more information can be found in the work by {\f3\fs22{\field{\*\fldinst{HYPERLINK "http://www.hevanet.com/cristofd/brainfuck/utm.b" }}{\fldrslt{\ul\cf1\cf2\ul\f0\fs24 Daniel B Cristofani)}}}}\f0\fs24\par
\trowd\trgaph108\trleft5\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clcbpat4\clbrdrl\brdrw10\brdrs\clbrdrt\brdrw10\brdrs\clbrdrr\brdrw10\brdrs\clbrdrb\brdrw10\brdrs \cellx9355 
\pard\intbl\widctlpar\b\f2 1 1 0 3 0 1 2 0 3 2 0 3 0 1 0 4 2 3 0 3 2 0 4 2 0 4 3 0 4 2 3 0 3 0 1 6 2 2 0 4 2 0 4 2 3 0 4 2 3 0 2 2 0 3 0 2 4 0 4 2 0 4 2 0 2 4 0 4 2 0 4 2 3 0 3 0 2 4 0 3 0 2 4 0 3 0 2 2 0 4 2 3 0 4 2 0 4 2 0 1 6 2 2 0 3 2 0 2 2 0 4 2 3 0 4 2 0 4 2 2 0 2 2 2 2 0 3 2 0 2 2 0 4 2 3 0 2 2 0 3 0 2 4 0 4 2 0 2 4 0 2 4 0 4 2 0 4 2 3 0 4 2 2 0 4 2 0 4 2 3 0 4 2 0 2 4 0 1 0 4 2 1 0 4 2 3 0 3 0 2 4 0 4 2 0 4 2 0 1 0 3 0 2 2 0 3 2 0 3 0 2 4 0 4 2 0 2 4 0 4 2 0 4 2 3 0 4 2 4 0 3 0 4 2 3 0 2 2 0 4 2 3 0 3 0 1 5 0 2 2 0 4 2 2 0 2 4 0 3 0 4 2 3 0 4 2 1 0 3 0 2 2 4 0 1 0 4 2 0 4 2 0 4 2 0 1 1 0 3 1 0 4 2 3 0 2 2 0 4 2 3 0 4 2 0 4 2 0 1 0 3 0 2 2 0 3 0 2 2 0 4 2 3 0 4 2 0 4 2 0 4 2 3 0 2 2 4 0 3 2 2 0 4 2 3 0 4 2 0 4 2 1 2 0 3 1 0 2 2 0 4 2 3 0 4 2 0 4 2 0 2 2 2 0 3 0 2 2 3 2 3 0 1 1 0 4 2 2 0 4 2 3 0 4 2 0 4 2 0 1 0 3 1 0 3 0 2 2 0 4 2 2 0 4 2 3 0 4 2 0 4 2 2 0 3 0 2 2 0 3 0 2 2 0 4 2 3 0 4 2 0 4 2 0 1 1 2 0 3 1 0 3 0 1 4 0 2 2 0 4 2 3 0 3 0 2 2 0 4 2 2 0 4 2 3 0 4 2 0 4 2 2 0 3 0 2 2 0 3 2 2 0 4 2 3 0 4 2 0 4 2 2 0 3 2 2 0 4 2 3 0 4 2 0 4 2 0 1 1 0 3 0 3 2 2 0 4 2 2 0 4 2 3 0 4 2 0 4 2 5 0 3 2 0 3 0 1 2 0 4 2 2 0 4 2 3 0 4 2 0 4 2 1 2 0 3 2 0 3 0 1 0 4 2 2 0 4 2 3 0 3 0 4 2 3 0 2 2 4 0 4 2 2 0 4 2 3 0 4 2 0 4 2 2 0 3 2 0 3 0 1 1 0 4 2 2 0 4 2 3 0 4 2 0 4 2 2 0 3 0 3 2 2 2 0 4 2 2 0 4 2 3 0 4 2 0 4 2 0 1 1 2 0 3 1 0 3 0 1 0 4 2 2 0 4 2 3 0 4 2 0 4 2 0 4 2 3 0 2 2 0 2 4 0 3 0 2 2 0 3 2 0 1 2 0 4 2 0 4 2 3 0 4 2 0 4 2 1 6 2 2 0 3 1 0 3 0 2 2 2 0 4 2 2 0 4 2 3 0 4 2 2 0 3 2 0 1 2 0 4 2 0 4 2 3 0 4 2 4 2 2 0 3 2 2 0 2 4 0 2 4 0 2 4 0 2 4 0 2 4 0 2 4 0 2 4 0 2 4 0 2 4 0 2 4 0 2 4 0 2 4 0 2 4 0 2 4 0 2 4 0 2 4 0 2 4 0 2 4 0 2 4 0 2 4 0 2 4 0 2 4 0 4 2 0 4 2 3 0 2 2 0 3 2 0 4 2 3 0 4 2 0 4 2 0 1 0 3 2 2 0 2 4 0 4 2 0 4 2 0 4 2 0 4 2 3 0 3 2 0 3 0 1 0 4 2 0 4 2 0 4 2 2 0 2 4 0 2 4 0 4 2 3 0 3 2 0 3 0 1 0 4 2 0 4 2 0 4 2 2 4 0 2 4 0 3 2 4 0 3 0 4 2 3 0 2 2 0 4 2 3 0 2 2 2 2 0 4 2 3 0 2 2 0 4 2 0 2 4 0 2 4 0 3 0 2 4 0 3 0 4 2 3 0 1 1 0 4 2 3 0 4 2 0 1 6 2 2 0 3 0 2 2 2 0 2 4 0 3 0 2 4 0 1 0 4 2 0 1 2 0 4 2 3 0 4 2 3 0 3 0 1 6 2 2 0 4 2 2 0 2 4 0 4 2 0 2 4 0 3 2 0 4 2 3 0 2 2 0 4 4 0 3 0 2 4 0\cell\row 
\pard\widctlpar\sa160\sl252\slmult1\b0\f0\par
\tab The minimal test case for this program is b1b1bbb1c1c11111d (which is 98 49 98 49 98 98 98 49 99 49 99 49 49 49 49 49 100 in decimal ascii, which is how the Java interpreter accepts input) which will test all the 23 Turing machine instructions.\par

\pard\widctlpar\fi720\sa160\sl252\slmult1 Brainf*ck is a tape-based esoteric language created in 1993 by Urban M\'fcller. The sample Hello World program is modified from the Brainf*ck code included on its its {\f3\fs22{\field{\*\fldinst{HYPERLINK "https://esolangs.org/wiki/brainfuck" }}{\fldrslt{\ul\cf1\cf2\ul\f0\fs24 Esolang page}}}}\f0\fs24 .\par

\pard\widctlpar\sa160\sl252\slmult1\f3\fs22\par

\pard\sa200\sl276\slmult1\f4\lang9\par
}
 